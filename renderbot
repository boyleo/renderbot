#!/usr/bin/env python
# -*- coding: utf-8 -*-


# Renderbot -- Blender render tool for Amazon Web Services that adds TUI and additional functionality to James Yonan's Brenda scripts
# Copyright (C) 2016 Jacques Paye
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#import required python libraries
from os import system
import subprocess
from time import sleep
import curses, traceback, curses.textpad as textpad
import sys;
reload(sys);
sys.setdefaultencoding("utf8")
import locale
locale.setlocale(locale.LC_ALL,"")
from urllib import urlopen

####################################################

#start of main loop

def main(stdscr):
	
	homescreen = stdscr.subwin(24, 80, 0, 0)

	#draw border around homescreen
	homescreen.border(0)
	#draw renderbot logo
	homescreen.addstr(1,9, " _____  ______ _   _ _____  ______ _____  ____   ____ _______ ")
	homescreen.addstr(2,9, "|  __ \|  ____| \ | |  __ \|  ____|  __ \|  _ \ / __ \__   __|")
	homescreen.addstr(3,9, "| |__) | |__  |  \| | |  | | |__  | |__) | |_) | |  | | | |   ")
	homescreen.addstr(4,9, "|  _  /|  __| | . ` | |  | |  __| |  _  /|  _ <| |  | | | |   ")
	homescreen.addstr(5,9, "| | \ \| |____| |\  | |__| | |____| | \ \| |_) | |__| | | |   ")
	homescreen.addstr(6,9, "|_|  \_\______|_| \_|_____/|______|_|  \_\____/ \____/  |_|   ")
	#display five homescreen options
	homescreen.addstr(10,32, "1 - Setup")
	homescreen.addstr(12,32, "2 - Check Prices")
	homescreen.addstr(14,32, "3 - Manage Queue")
	homescreen.addstr(16,32, "4 - Start Instances")
	homescreen.addstr(18,32, "5 - Exit")

	#display the homescreen
	homescreen.refresh()
	#initialize variable for homescreen input
	homeinput = 0
	
	#Homescreen input loop.
	#While the user has not pressed exit
	while homeinput != ord('5'):
		homescreen.refresh()
		#get homescreen input with curses get character function
		homeinput = homescreen.getch()

		#If user presses 1 for setup options
		if homeinput == ord('1'):
			#Create new window
			setup = curses.newwin(24,80,0,0)
			#initialize setup input variable
			setupinput = 0
			#while user has not pressed exit
			while setupinput != ord('3'):
				#function used to draw textboxes, includes XY coordinates, a label to be displayed, the line number of the entry in the Brenda configuration file, and an approximate length for formatting considerations
				def drawtextbox(boxY1, boxX1, label, linenumber, approxlength):
					setup.addstr(boxY1, boxX1+1, label)
					labellength = len(label)
					#function includes getting the current values from the brenda configuration file
					setup.addstr(boxY1, boxX1+2+labellength, subprocess.check_output("sed -n %dp ~/.brenda.conf | cut -f2- -d'='" % linenumber, shell=True))
					setup.refresh
				#function used to draw censored textboxes for confidential information (AWS keys)
                                def redactedtextbox(boxY1, boxX1, label, linenumber, approxlength):
                                        setup.addstr(boxY1, boxX1+1, label)
                                        labellength = len(label)
                                        setup.addstr(boxY1, boxX1+2+labellength, "*" * len(subprocess.check_output("sed -n %dp ~/.brenda.conf | cut -f2- -d'='" % linenumber, shell=True)))
                                        #curses.textpad.rectangle(setup, boxY1, boxX1, boxY1+2, boxX1+3+labellength+approxlength)
                                        setup.refresh
                                #function used to get user input for each option
				def gettext(boxY1, boxX1, label, linenumber, approxlength):
					labellength = len(label)
					typingbox = setup.subwin(1,approxlength+1, boxY1, boxX1+labellength+2)
					curses.curs_set(1)
					textpad.Textbox(typingbox).edit()
					returnvalue = str(textpad.Textbox(typingbox).gather())
					curses.curs_set(0)
					subprocess.check_output("sed -i \'%ds@\=.*@\=%s@\' ~/.brenda.conf" % (linenumber, returnvalue), shell=True)
				#function used to get current AWS region in configuration file
				def getregion(boxY1, boxX1, label, linenumber, approxlength):
					labellength = len(label)
					typingbox = setup.subwin(1,approxlength+1, boxY1, boxX1+labellength+2)
					curses.curs_set(1)
					returnvalue = str(textpad.Textbox(typingbox).gather())
					curses.curs_set(0)
					subprocess.check_output("sed -i \'%ds@\=.*@\=%s@\' ~/.brenda.conf" % (linenumber, returnvalue), shell=True)
				#function used to clear a line
				def clearline(line):
                                	setup.addstr(line,3, "                                                                           ")
	
				#Enables use of keypad
				setup.keypad(1)
				#Writes out text on setup screen
				setup.addstr(1,37, "Setup")
				setup.addstr(20,32, "1 - Edit")
				setup.addstr(21,32, "2 - Push settings")
				setup.addstr(22,32, "3 - Home")
				#Creates textboxes for AWS keys
				redactedtextbox(4,5,"AWS Access Key:",8,20)
				redactedtextbox(6,5,"AWS Secret Key:",9,40)
				#Draws text boxes, uses line numbers from config file to also get the info currently in the configuration file
				drawtextbox(8,5,"Blender Project:", 2, 50)
				drawtextbox(10,5,"Output location:", 4, 50)
				drawtextbox(12,5,"SQS work queue:", 3, 50)
				drawtextbox(14,5,"Default instance type:", 1, 15)
				drawtextbox(16,5,"When finished:", 6, 8)
				drawtextbox(18,5,"AWS region:", 10, 16)
				#Draws borders
				textpad.rectangle(setup,3,4,19,75)
				setup.border(0)
				#refresh screen
				setup.refresh()
				#get the setup input variable using curses getch function
				setupinput = setup.getch()
				#If user wants to edit and presses 1
				if setupinput == ord('1'):
					#Make the secret keys that were redacted (********) now appear in plaintext by using normal drawing function
	                                drawtextbox(4,5,"AWS Access Key:",8,20)
	                                drawtextbox(6,5,"AWS Secret Key:",9,40)
	                                #redraw borders
        	                        textpad.rectangle(setup,3,4,19,75)
                	                setup.border(0)
                        	        setup.refresh()
                        	        #get user input successively for all options (this also edits the configuration file through use of gettext function above)
                                	gettext(4,5,"AWS Access Key:",8,20)
	                                gettext(6,5,"AWS Secret Key:",9,40)
        	                        gettext(8,5,"Blender Project:", 2, 50)
                	                gettext(10,5,"Output location:", 4, 50)
                        	        gettext(12,5,"SQS work queue:", 3, 50)
                                	gettext(14,5,"Default instance type:", 1, 15)
	                                gettext(16,5,"When finished:", 6, 8)
        	                        gettext(18,5,"AWS region:", 10, 16)
        	                        #Also get region info and input it (needs to be inputted several times because region is used multiple times in the config file, but shouldn't need to be inputted multiple times by the user
                	                getregion(18,5,"AWS region:", 11, 16)
                        	        getregion(18,5,"AWS region:", 12, 16)
                        	        #Run brenda initialization function
                                	subprocess.check_output("brenda-run init", shell=True)



				elif setupinput == ord('2'):
				#If user wants to push settings to running instances
					#Clear line used for message display
					clearline(21)
					#Ask for confirmation
					setup.addstr(21,15, "Stop all current processes and push new settings? (1-yes, 2-no)")
					setup.refresh()
					#Get user input
					pushinput = setup.getch()
					#If user wants to push settings
					if pushinput == ord('1'):
						clearline(21)
						#Tell user settings are being pushed
						setup.addstr(21,15, "Pushing new settings to instances...")
						setup.refresh()
						#Try to push settings
						try:
							#First, tell any running nodes to kill their current brenda-node processes and remove any previous newrendersettings file that user might have pushed before
                                               		try:
                                                       		subprocess.check_output("brenda-tool ssh sudo killall brenda-node", shell=True)
                                                       		subprocess.check_output("sudo rm -rf ~/newrendersettings", shell=True)
                                               		#But user may not have pushed settings in the past or brenda-node may not be working at that time, so pass exceptions
                                               		except:   
                                                       		pass
                                                       	#Send brenda script to a local file on client machine
                                               		subprocess.check_output("sudo brenda-run script > ~/newrendersettings", shell=True)
                                               		#Format that script properly using sed
                                               		subprocess.check_output("sed -i '1i sudo -i' ~/newrendersettings", shell=True)
                                               		#Use brenda-tool ssh to send that script to nodes
                                               		subprocess.check_output("brenda-tool ssh 'bash -s' < ~/newrendersettings", shell=True)
                                               		clearline(21)
                                               		#inform user that settings have been pushed
                                               		setup.addstr(21,15,'Settings pushed.')
                                               		setup.refresh()
                                               		#slight delay so user can read message
							sleep(0.5)
							clearline(21)
							#and continue loop
							continue
						#Otherwise, inform user that push failed
						except:
							clearline(21)
							setup.addstr(21,15,'Push failed.')
							setup.refresh()
							sleep(0.5)
							clearline(21)
							continue
					#If user does not confirm push, cancel push and inform user
                                        else:
                                               	clearline(21)
                                               	setup.addstr(21,15, 'Settings push cancelled.')
                                               	setup.refresh()
                                               	sleep(0.5)
						clearline(21)
						continue

				#If user wants to exit this screen, break loop				
				elif setupinput == ord('3'):
					break

								
			#go back to homescreen			
			homescreen.refresh()


		#If user wants to check prices, go into prices loop
		if homeinput == ord('2'):
			#Make window and initialize input variable
			prices = curses.newwin(24,80,0,0)		
			pricesinput = 0
			#While user has not indicated they want to exit
			while pricesinput != ord('3'):
				#Draw border and put in text on screen
				prices.border(0)
				prices.addstr(2,32, "Check Prices")
				prices.addstr(14,32, "1 - Input instance type")
				prices.addstr(16,32, "2 - Refresh")
				prices.addstr(18,32, "3 - Home")
				#Including subwindow for input
				inputbox = prices.subwin(3,30,4,2)
				inputbox.border(0)
				prices.addstr(5,3, "Instance Type:")
				#Typing box for user to indicate the instance type to check
				typingbox = prices.subwin(1,13,5,18)
				#Output box for prices
				outputbox = prices.subwin(8,45,4,33)
				outputbox.border(0)
				prices.refresh()
				
				#Clear text box area
				for y in range(5, 11):
		   				prices.addstr(y, 34, "                                           ")
				#Get instance input
				instance = str(textpad.Textbox(typingbox).gather())
				#Run brenda price-check command
				output = subprocess.check_output(["brenda-run", "-i", instance, "price"])
				#Split up output and put it on screen in output box
				for y, line in enumerate(output.splitlines(), 5):
		   				prices.addstr(y, 34, line)
   				#Draw border and refresh
				prices.border(0)
				prices.refresh()
				#Get input on this screen
				pricesinput = prices.getch()
				if pricesinput == ord('1'):
					#If user wants to input instance type, edit that text box
					curses.curs_set(1)
					textpad.Textbox(typingbox).edit()
					
					curses.curs_set(0)
					continue
				#If user wants to refresh, just run the loop
				if pricesinput == ord('2'):
					continue
			#And back to homescreen
			homescreen.refresh()
		#If user wants to add tasks, go to new screen
		if homeinput == ord('3'):
			#Set up border and input variable
			queue = curses.newwin(24,80,0,0)		
			queueinput = 0
			#While user has not pressed exit
			while queueinput != ord('5'):
				#Define draw text box function
				def drawtextbox(boxY1, boxX1, label, approxlength):
					queue.addstr(boxY1, boxX1+1, label)
					labellength = len(label)
				#Define get text function
				def gettext(boxY1, boxX1, label, approxlength):
					labellength = len(label)
					#Defines typing box
					typingbox = queue.subwin(1,approxlength+1, boxY1, boxX1+labellength+2)
					curses.curs_set(1)
					#Allows user to edit that box
					textpad.Textbox(typingbox).edit()
					#Returns what user typed
					returnvalue = str(textpad.Textbox(typingbox).gather())
					curses.curs_set(0)
					return returnvalue
					

				#Add in all the text on screen and borders
				queue.addstr(2,32, "Manage Queue")
				
				queue.addstr(14,32, "1 - Add frame tasks")
				queue.addstr(16,32, "2 - Add subframe tasks")
				queue.addstr(18,32, "3 - Refresh")
				queue.addstr(20,32, "4 - Reset tasks")
				queue.addstr(22,32, "5 - Home")
				queue.border(0)
				curses.textpad.rectangle(queue, 5, 3, 7, 25)
				curses.textpad.rectangle(queue, 5, 30, 12, 75)
				queue.refresh()
				#Add current task count from brenda-work script
				queue.addstr(6, 4, subprocess.check_output("brenda-work status", shell=True))
				queue.border(0)
				#More borders
				curses.textpad.rectangle(queue, 5, 3, 7, 25)
				curses.textpad.rectangle(queue, 5, 30, 12, 75)
				#Refresh and get an input for the queue screen from user
				queue.refresh()
				queueinput = queue.getch()
				#If user wants to add frame tasks
				if queueinput == ord('1'):
					#Clear out some lines
					queue.addstr(11, 31, '                                  ')
					queue.addstr(9, 31, '                                  ')
					queue.addstr(7, 31, '                                  ')
					#Add start and end text
					drawtextbox(7, 30, "Start:", 15)
					drawtextbox(9, 30, "End:", 15)
					queue.refresh()
					#Get variables from user for start and end frames
					start = int(gettext(7, 30, "Start:", 15))
					end = int(gettext(9, 30, "End:", 15))
					total = int(end)-int(start)+1
					#If start is > than end tell user and reloop
					if total <= 0:
						queue.addstr(11, 31, 'Invalid # of frames.')
						continue
					#Ask for confirmation
					queue.addstr(11, 31, 'Add %d frames? (1 - yes, 2 - no)' % total)
					frameanswer = queue.getch()
					#If user confirms
					if frameanswer == ord('1'):
						#Tell user frames are being added
						queue.addstr(11, 31, 'Please wait as frames are added... ')
						queue.refresh()
						#Push frames
						subprocess.check_output("brenda-work -T ~/frame-template -s %d -e %d push" % (start, end), shell=True)
						queue.addstr(11, 31, '                                           ')
						#Tell user frames were added
						queue.addstr(11, 31, '%d frames added to work queue.     ' % total)
						queue.refresh()
					#Otherwise cancel, inform user, and reloop
					if frameanswer != ord ('1'):
						queue.addstr(11, 31, 'Add frames operation cancelled.    ')
						queue.refresh()
						continue
				#If user wants to add subframes	
				elif queueinput == ord('2'):
					queue.addstr(11, 31, '                                           ')
					#Put in text
					drawtextbox(7, 30, "Start:", 10)
					drawtextbox(9, 30, "End:", 10)
					drawtextbox(7, 50, "Horiz. tiles:", 10)
					drawtextbox(9, 50, "Vert. tiles:", 10)
					queue.refresh()
					#Get all the variables from user, including vertical and horizontal subdivisions
					start = int(gettext(7, 30, "Start:", 10))
					end = int(gettext(9, 30, "End:", 10))
					vsub = int(gettext(7, 50, "Horiz. tiles:", 9))
					hsub = int(gettext(9, 50, "Vert. tiles:", 10))
					#Figure out total number of frames
					total = end - start + 1
					#Figure out total number of subframes
					totalsubframes = (end*hsub*vsub)-(start*hsub*vsub)+(1*hsub*vsub)
					#If total is invalid, tell user and reloop
					if total <= 0:
						queue.addstr(11, 31, 'Invalid # of frames.')
						continue
					#Clear message space
					queue.addstr(11, 31, '                                           ')
					#Ask user whether to add subframes requested
					queue.addstr(11, 31, 'Add %d subframes? (1 - yes, 2 - no)' % totalsubframes)
					frameanswer = queue.getch()
					#If confirmed
					if frameanswer == ord('1'):
						queue.addstr(11, 31, '                                           ')
						#Clear messages and inform user that push is occurring
						queue.addstr(11, 31, 'Please wait as subframes are added... ')
						queue.refresh()
						#Push frames with brenda-work script
						subprocess.check_output("brenda-work -T ~/subframe-template -s %d -e %d -X %d -Y %d push" % (start, end,hsub,vsub), shell=True)
						queue.addstr(11, 31, '                                           ')
						#Tell user all frames have been pushed
						queue.addstr(11, 31, '%d subframes added to work queue     ' % totalsubframes)
						queue.refresh()
					#If user does not confirm, stop, tell user, and reloop
					if frameanswer != ord ('1'):
						queue.addstr(11, 31, '                                           ')
						queue.addstr(11, 31, 'Add subframes operation cancelled.    ')
						queue.refresh()
						continue
				#If user wants to refresh task number, just reloop
				elif queueinput == ord('3'):
					continue
				#If user wants to delete tasks, start that procedure
				elif queueinput == ord('4'):
					queue.addstr(11, 31, '                                           ')
					#Ask for confirmation
					queue.addstr(11, 31, 'Delete all tasks? (1 - yes, 2 - no)')
					queue.refresh()
					frameanswer = queue.getch()
					#If confirmed, delete tasks and inform. Otherwise, put up a cancellation message and reloop
					if frameanswer == ord('1'):
						queue.addstr(11, 31, 'Please wait while tasks are deleted...    ')
						queue.refresh()
						subprocess.check_output("brenda-work reset", shell=True)
						queue.addstr(11, 31, '                                           ')
						queue.addstr(11, 31, 'All tasks deleted.    ')
						queue.refresh()
					if frameanswer != ord ('1'):
						queue.addstr(11, 31, '                                           ')
						queue.addstr(11, 31, 'Delete operation cancelled.    ')
						queue.refresh()
						continue
		#back to homescreen once exited from task management loop	
		homescreen.refresh()

		#If user wants to launch instances, go to that screen
		if homeinput == ord('4'):
			instancesinput = 0
			instances = curses.newwin(24,80,0,0)
			instances.keypad(1)
			#Put up all the text
			instances.addstr(2,32, "Start Instances")
			instances.addstr(14,5, "1 - Create spot requests")
			instances.addstr(16,5, "2 - Launch on-demand instances")
			instances.addstr(18,5, "3 - Cancel all spot requests")
			instances.addstr(20,5, "4 - Stop all running instances")
			instances.addstr(14,45, "5 - Prune running instances")
			instances.addstr(16,45, "6 - View running instances")
			instances.addstr(18,45, "7 - View current spot requests")
			instances.addstr(20,45, "8 - Home")
			#Put up borders
			curses.textpad.rectangle(instances, 4, 10, 12, 70)
			instances.border(0)
			instances.refresh()
			#Define text box drawing function
			def drawtextbox(boxY1, boxX1, label, approxlength):
				instances.addstr(boxY1, boxX1+1, label)
				labellength = len(label)
			#Function for getting user input
			def gettext(boxY1, boxX1, label, approxlength):
				labellength = len(label)
				typingbox = instances.subwin(1,approxlength+1, boxY1, boxX1+labellength+2)
				curses.curs_set(1)
				textpad.Textbox(typingbox).edit()
				returnvalue = str(textpad.Textbox(typingbox).gather())
				curses.curs_set(0)
				return returnvalue
			#Function to clear line
			def clearline(line):
				instances.addstr(line,11, "                                                           ")
			messages = instances.subwin(4,30,8,40)
			   
			#While user has not indicated they want to exit
			while instancesinput != ord('8'):
				
				#If user wants to launch spot instances
				if instancesinput == ord('1'):
					
					instancesinput = 0
					#Clear some lines
					clearline(6)
					clearline(8)
					clearline(10)
					#Add in text for spot request screen
					drawtextbox(6,12,"Instance type:", 15)
					drawtextbox(8,12,"Number of instances:", 6)
					drawtextbox(10,12,"Highest price ($):", 6)
					drawtextbox(6,45,"Persistent? (y/n):", 1)
					
					instances.refresh()
					#Get all the variables from user
					instancetype = gettext(6,12,"Instance type:", 15)
					count = gettext(8,12,"Number of instances:", 6).replace("$", "")
					price = gettext(10,12,"Highest price ($):", 6)
					#Convert the user's Y to the correct option for brenda-run to make requests persistent
					persistent = gettext(6,45,"Persistent? (y/n):", 1).replace("Y", "-P").replace("y","-P")
					if persistent != "-P ":
						persistent = ""
					#Try to calculate overall price for all instance requests
					try:

						overallprice = float(price) * int(count)
						
					#if that throws an error tell user
					except:
						
						messages.clear()
						messages.addstr(2,0, 'Invalid parameters! Try again.')		
						instances.refresh()
						continue
					#Ask user for confirmation
					messages.clear()
					messages.addstr(0, 0, '   Request at $%s per hour?' % overallprice)
					messages.addstr(2,0, '       (1 - yes, 2 - no) ')
					instances.refresh()
					
					frameanswer = instances.getch()
					#Get confirmation answer
					if frameanswer == ord('1'):
						#Get the AMI from renderbot website (has current "official" Renderbot AMI, but this line could be changed to reflect any AMI user wants)
						amivariable = open('~/renderbot/ami').read()
						messages.clear()
						#Tell user and make requests, give confirmation after
						messages.addstr(2,0, '      Making requests...')
						messages.refresh()
						subprocess.check_output("brenda-run %s -i %s -N %s -p %s -a %s spot" % (persistent, instancetype, count, price, amivariable), shell=True)
						messages.clear()
						messages.addstr(2,0,'      %s request(s) made.' % count)
						messages.refresh()
					#Otherwise, just reloop
					else:
						messages.clear()
						messages.addstr(2,0, '      Requests cancelled.')
						messages.refresh()
						continue
				#If user wants to launch demand instances
				if instancesinput == ord('2'):
					instancesinput = 0
					clearline(6)
					clearline(8)
					clearline(10)
					instancesinput = 0
					#Add text to describe text fields
					drawtextbox(6,12,"Instance type:", 15)
					drawtextbox(8,12,"Number of instances:", 6)
					
					
					instances.refresh()
					#Get user's input
					instancetype = gettext(6,12,"Instance type:", 15)
					count = gettext(8,12,"Number of instances:", 6).replace("$", "")
					
					#Ask for confirmation
					messages.clear()
					messages.addstr(0, 0, '      Launch %s instances?' % count)
					messages.addstr(2,0, '       (1 - yes, 2 - no) ')
					instances.refresh()
					
					frameanswer = instances.getch()
					#If user says yes, launch instances and give confirmation
					if frameanswer == ord('1'):
						amivariable = open('~/renderbot/ami').read()
						messages.clear()
						messages.addstr(2,0, '      Launching instances...')
						messages.refresh()
						subprocess.check_output("brenda-run -i %s -N %s -a %s demand" % (instancetype, count, amivariable), shell=True)
						messages.clear()
						messages.addstr(2,0,'      %s instance(s) launched.' % count)
						messages.refresh()
					#otherwise, inform user that launch has been cancelled
					else:
						messages.clear()
						messages.addstr(2,0, '      Launch cancelled')
						messages.refresh()
						continue
				#If user wants to cancel requests, go to that screen
				if instancesinput == ord('3'):
					#Initialize input variable and clear lines
					instancesinput = 0
					clearline(6)
					clearline(8)
					clearline(10)
					#Ask for confirmation
					messages.clear()
					messages.addstr(0, 0, '    Cancel all spot requests?')
					messages.addstr(2,0, '       (1 - yes, 2 - no) ')
					frameanswer = instances.getch()
					#If yes, cancel and confirm, otherwise inform user and reloop
					if frameanswer == ord('1'):
						messages.clear()
						messages.addstr(2,0, '      Cancelling requests...')
						messages.refresh()
						subprocess.check_output("brenda-run cancel", shell=True)
						messages.clear()
						messages.addstr(2,0,'      All requests cancelled.')
						messages.refresh()
					else:
						
						messages.clear()
						messages.addstr(2,0, '      Cancellation cancelled')
						messages.refresh()
						continue
						instances.refresh()
						
				#if user wants to stop all instances, go to that screen
				if instancesinput == ord('4'):
					instancesinput = 0
					clearline(6)
					clearline(8)
					clearline(10)
					#Ask for confirmation
					messages.clear()
					messages.addstr(0, 0, '    Stop all instances?')
					messages.addstr(2,0, '       (1 - yes, 2 - no) ')
					frameanswer = instances.getch()
					#If yes, stop and give confirmation message
					if frameanswer == ord('1'):
						messages.clear()
						messages.addstr(2,0, '      Stopping instances...')
						messages.refresh()
						subprocess.check_output("brenda-run -T stop", shell=True)
						messages.clear()
						messages.addstr(2,0,'      All instances stopped.')
						messages.refresh()
					#Otherwise, tell user and reloop
					else:
						
						messages.clear()
						messages.addstr(2,0, '      Termination cancelled')
						messages.refresh()
						continue
						instances.refresh()
				#If user wants to prune running instances, go to that screen
				if instancesinput == ord('5'):
                                        instancesinput = 0
                                        clearline(6)
                                        clearline(8)
                                        clearline(10)
					#Put in text for user-given parameters
                                        drawtextbox(6,12,"Target instance count:", 4)
                                        drawtextbox(8,12,"Minutes used filter?:", 2)
                                        instances.refresh()
					#Get user input
                                        instancecount = gettext(6,12,"Target instance count:", 4).replace(' ', '')
                                        minutefilter = gettext(8,12,"Minutes used filter?:", 2).replace(' ', '')
                                	#If user has provided a minute filter, put that in as a parameter
                                        if minutefilter:
                                                minutefilter = "-t" + " " + str(minutefilter)
                                        messages.clear()
                                        #ask for confirmation
                                        messages.addstr(0, 0, '    Prune to %s instances?' % instancecount)
                                        messages.addstr(2,0, '       (1 - yes, 2 - no) ')
                                        frameanswer = instances.getch()
                                	#If yes, prune and confirm
                                        if frameanswer == ord('1'):
                                                messages.clear()
                                                messages.addstr(2,0, '    Pruning to %s instances...' % instancecount)
                                                messages.refresh()
                                                subprocess.check_output("brenda-tool -T %s prune %s" % (minutefilter, str(instancecount)), shell=True)
                                                messages.clear()
                                                messages.addstr(2,0,'      Instances pruned.')
                                                messages.refresh()
                                        #If no, do nothing and reloop
                                        else:

                                                messages.clear()
                                                messages.addstr(2,0, '      Pruning cancelled.')
                                                messages.refresh()
                                                continue
                                                instances.refresh()

				#If user wants status report, go to that screen
				if instancesinput == ord('6'):
					#Borders and text and keypad
					instancestatusinput = 0
					instancestatus = curses.newwin(24,80,0,0)
					instancestatus.keypad(1)
					instancestatus.border(0)
					instancestatus.addstr(2,26, "Running Instance Status Report")
					instancestatus.addstr(18,32, "Scroll with arrows")
					instancestatus.addstr(20, 32, "1 - Refresh")
					instancestatus.addstr(22, 32, "2 - Back")
					instancestatus.refresh()
					#Set variable for up/down position and left/right position
					runstatus_posUD = 0
					runstatus_posLR = 0
					#Create text area for report
					runstatus = curses.newpad(100,100)
					#Put in report from brenda-run that has been piped through a sed function to format it better
					runstatus.addstr(0, 0, subprocess.check_output("brenda-run status | sed 's/\.000Z//g;s/T/ /g;s/<Status: //g;s/>//g;s/@/│/g;s/`/T/g;/Spot Requests.*/Q'", shell=True).encode('utf-8'))
					toplabel = curses.newpad(2,100)
					#Put in labels at top for each column
					toplabel.addstr(0,0, "instance type  │uptime          │launch date/time (GMT)\n───────────────────────────────────────────────────────────────────────────────────────────────")
	
					while instancestatusinput != ord('2'):
					#This whole loop takes care of scrolling around the report
						#Set variables for endpoints of screen
						ystart = 6
						xstart = 2
						yend = 16
						xend = 77
						runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)
						instancestatus.refresh()
						#Take care of all arrow-key motion
						if instancestatusinput == curses.KEY_DOWN:
							if runstatus_posUD < 100:
								runstatus_posUD += 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						elif instancestatusinput == curses.KEY_UP:
							if runstatus_posUD > 0:
								runstatus_posUD -= 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						elif instancestatusinput == curses.KEY_RIGHT:
							if runstatus_posLR > 0:
								runstatus_posLR -= 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
								toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)
						elif instancestatusinput == curses.KEY_LEFT:
							if runstatus_posLR < 100:
								runstatus_posLR += 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
								toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)			
						#If user wants to refresh, reload report
						if instancestatusinput == ord('1'):
				
							runstatus.clear()
							runstatus.addstr(0, 0, subprocess.check_output("brenda-run status | sed 's/\.000Z//g;s/T/ /g;s/<Status: //g;s/>//g;s/@/│/g;s/`/T/g;/Spot Requests.*/Q'", shell=True).encode('utf-8'))
							runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						#Get input from user
						instancestatusinput = instancestatus.getch()
					#Refresh window
					instances.touchwin()
					instances.refresh()
				#If user wants a spot request status report, follow a similar procedure
				if instancesinput == ord('7'):
					instancestatusinput = 0
					instancestatus = curses.newwin(24,80,0,0)
					instancestatus.keypad(1)
					instancestatus.border(0)
					instancestatus.addstr(2,28, "Spot Request Status Report")
					instancestatus.addstr(18,32, "Scroll with arrows")
					instancestatus.addstr(20, 32, "1 - Refresh")
					instancestatus.addstr(22, 32, "2 - Back")
					instancestatus.refresh()
					runstatus_posUD = 0
					runstatus_posLR = 0
					runstatus = curses.newpad(100,100)
					#Get info with formatting with sed
					runstatus.addstr(0, 0, subprocess.check_output("brenda-run status | sed 's/\.000Z//g;s/T/ /g;s/<Status: //g;s/>//g;s/@/│/g;s/`/T/g' | sed -n '/^Spot Requests$/,$p' | tail -n +2", shell=True).encode('utf-8'))
					toplabel = curses.newpad(2,100)
					toplabel.addstr(0,0, "status   │price  │type      │date/time (GMT)    │status code\n───────────────────────────────────────────────────────────────────────────────────────────")
					while instancestatusinput != ord('2'):

					#Accept arrow-key input to move report around	
						ystart = 6
						xstart = 2

						yend = 16
						xend = 77
						runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)
						instancestatus.refresh()
						if instancestatusinput == curses.KEY_DOWN:
							if runstatus_posUD < 100:
								runstatus_posUD += 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						elif instancestatusinput == curses.KEY_UP:
							if runstatus_posUD > 0:
								runstatus_posUD -= 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						elif instancestatusinput == curses.KEY_RIGHT:
							if runstatus_posLR > 0:
								runstatus_posLR -= 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
								toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)
						elif instancestatusinput == curses.KEY_LEFT:
							if runstatus_posLR < 100:
								runstatus_posLR += 1
								runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
								toplabel.refresh(0, runstatus_posLR, ystart-2,xstart, ystart-1, xend)			
						if instancestatusinput == ord('1'):
				
							runstatus.clear()
							runstatus.addstr(0, 0, subprocess.check_output("brenda-run status | sed 's/\.000Z//g;s/T/ /g;s/<Status: //g;s/>//g;s/@/│/g;s/`/T/g' | sed -n '/^Spot Requests$/,$p' | tail -n +2", shell=True).encode('utf-8'))
							runstatus.refresh(runstatus_posUD, runstatus_posLR, ystart, xstart, yend, xend)
						instancestatusinput = instancestatus.getch()
					instances.touchwin()
					instances.refresh()
				#Get instances input
				instancesinput = instances.getch()


		#Back to homescreen
		homescreen.refresh()

#Start of actual script

#initialize curses and all settings
if __name__=='__main__':
	#initalize curses
	stdscr = curses.initscr()
	
	#Infinite loop of main function
	while True:
		try: 
			
	
			stdscr.keypad(1)
			curses.noecho()
			curses.cbreak()
			curses.curs_set(0)
			
			main(stdscr)
	
			#When done, set everything back to normal
			stdscr.keypad(0)
			curses.echo()
			curses.nocbreak()
			curses.endwin()                                                
			#And break out of loop
			break
		except:
			#In the event of an error, try to restore terminal to sane state and display error message.
			
			stdscr.keypad(0)
			curses.echo()
			curses.nocbreak()
			curses.endwin()
			traceback.print_exc()

